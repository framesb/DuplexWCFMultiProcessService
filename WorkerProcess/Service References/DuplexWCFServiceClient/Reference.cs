//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkerProcess.DuplexWCFServiceClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkItem", Namespace="http://schemas.datacontract.org/2004/07/DuplexWCFService.Model")]
    [System.SerializableAttribute()]
    public partial class WorkItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> ItemsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkerError", Namespace="http://schemas.datacontract.org/2004/07/DuplexWCFService.Model")]
    public enum WorkerError : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fatal = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkerProgress", Namespace="http://schemas.datacontract.org/2004/07/DuplexWCFService.Model")]
    [System.SerializableAttribute()]
    public partial class WorkerProgress : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> ProcessedItemsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> ProcessedItems {
            get {
                return this.ProcessedItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessedItemsField, value) != true)) {
                    this.ProcessedItemsField = value;
                    this.RaisePropertyChanged("ProcessedItems");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkerState", Namespace="http://schemas.datacontract.org/2004/07/DuplexWCFService.Model")]
    public enum WorkerState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Free = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Processing = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Finished = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="DuplexWCFServiceClient.IDuplexWCFService", CallbackContract=typeof(WorkerProcess.DuplexWCFServiceClient.IDuplexWCFServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDuplexWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IDuplexWCFService/RequestWork", ReplyAction="http://Microsoft.ServiceModel.Samples/IDuplexWCFService/RequestWorkResponse")]
        WorkerProcess.DuplexWCFServiceClient.WorkItem RequestWork(string workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IDuplexWCFService/RequestWork", ReplyAction="http://Microsoft.ServiceModel.Samples/IDuplexWCFService/RequestWorkResponse")]
        System.Threading.Tasks.Task<WorkerProcess.DuplexWCFServiceClient.WorkItem> RequestWorkAsync(string workerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IDuplexWCFService/ReportError")]
        void ReportError(string workerId, WorkerProcess.DuplexWCFServiceClient.WorkerError processError);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IDuplexWCFService/ReportError")]
        System.Threading.Tasks.Task ReportErrorAsync(string workerId, WorkerProcess.DuplexWCFServiceClient.WorkerError processError);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IDuplexWCFService/ReportProgress")]
        void ReportProgress(string workerId, WorkerProcess.DuplexWCFServiceClient.WorkerProgress processProgress);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IDuplexWCFService/ReportProgress")]
        System.Threading.Tasks.Task ReportProgressAsync(string workerId, WorkerProcess.DuplexWCFServiceClient.WorkerProgress processProgress);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexWCFServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IDuplexWCFService/RequestState", ReplyAction="http://Microsoft.ServiceModel.Samples/IDuplexWCFService/RequestStateResponse")]
        WorkerProcess.DuplexWCFServiceClient.WorkerState RequestState();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexWCFServiceChannel : WorkerProcess.DuplexWCFServiceClient.IDuplexWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DuplexWCFServiceClient : System.ServiceModel.DuplexClientBase<WorkerProcess.DuplexWCFServiceClient.IDuplexWCFService>, WorkerProcess.DuplexWCFServiceClient.IDuplexWCFService {
        
        public DuplexWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DuplexWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DuplexWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public WorkerProcess.DuplexWCFServiceClient.WorkItem RequestWork(string workerId) {
            return base.Channel.RequestWork(workerId);
        }
        
        public System.Threading.Tasks.Task<WorkerProcess.DuplexWCFServiceClient.WorkItem> RequestWorkAsync(string workerId) {
            return base.Channel.RequestWorkAsync(workerId);
        }
        
        public void ReportError(string workerId, WorkerProcess.DuplexWCFServiceClient.WorkerError processError) {
            base.Channel.ReportError(workerId, processError);
        }
        
        public System.Threading.Tasks.Task ReportErrorAsync(string workerId, WorkerProcess.DuplexWCFServiceClient.WorkerError processError) {
            return base.Channel.ReportErrorAsync(workerId, processError);
        }
        
        public void ReportProgress(string workerId, WorkerProcess.DuplexWCFServiceClient.WorkerProgress processProgress) {
            base.Channel.ReportProgress(workerId, processProgress);
        }
        
        public System.Threading.Tasks.Task ReportProgressAsync(string workerId, WorkerProcess.DuplexWCFServiceClient.WorkerProgress processProgress) {
            return base.Channel.ReportProgressAsync(workerId, processProgress);
        }
    }
}
